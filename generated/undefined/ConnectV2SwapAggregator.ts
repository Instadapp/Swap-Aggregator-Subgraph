// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogSwapAggregator extends ethereum.Event {
  get params(): LogSwapAggregator__Params {
    return new LogSwapAggregator__Params(this);
  }
}

export class LogSwapAggregator__Params {
  _event: LogSwapAggregator;

  constructor(event: LogSwapAggregator) {
    this._event = event;
  }

  get connectors(): Array<string> {
    return this._event.parameters[0].value.toStringArray();
  }

  get connectorName(): string {
    return this._event.parameters[1].value.toString();
  }

  get eventName(): string {
    return this._event.parameters[2].value.toString();
  }

  get eventParam(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class ConnectV2SwapAggregator extends ethereum.SmartContract {
  static bind(address: Address): ConnectV2SwapAggregator {
    return new ConnectV2SwapAggregator("ConnectV2SwapAggregator", address);
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get _connectors(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get _datas(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get _eventName(): string {
    return this._call.outputValues[0].value.toString();
  }

  get _eventParam(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}
